# SPDX-License-Identifier: AGPL-3.0-only
# Copyright (C) 2024 Jonathan Lee
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License version 3
# as published by the Free Software Foundation.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see https://www.gnu.org/licenses/.

# GTR Data Structures
# These structs match the Rust NifStruct definitions for seamless interop

defmodule GtrFabric.NodeMetrics do
  @moduledoc """
  Represents the  @type t :: %__MODULE__{
    steepness: float(),
    centre: float(),
    failure_weight: float(),
    decay_lambda_per_day: float(),
    collateral_multiplier: float(),
    bonus_multiplier: float()s for a single node needed to calculate its SLA potential.
  Passed from Elixir to the `calculate_potential_value` NIF.
  """
  defstruct [
    :trust_score,
    :available_throughput,
    :predicted_latency_to_target
  ]

  @type t :: %__MODULE__{
    trust_score: float(),
    available_throughput: float(),
    predicted_latency_to_target: float()
  }
end

defmodule GtrFabric.CandidateHop do
  @moduledoc """
  Represents a potential next hop for a packet.
  Passed from Elixir to the `calculate_forwarding_decision` NIF.
  """
  defstruct [
    :id,
    :potential,
    :latency
  ]

  @type t :: %__MODULE__{
    id: String.t(),
    potential: float(),
    latency: float()
  }
end

defmodule GtrFabric.Breadcrumb do
  @moduledoc """
  Represents a single hop in a packet's journey.
  """
  defstruct [
    :node_id,
    :timestamp_ms
  ]

  @type t :: %__MODULE__{
    node_id: String.t(),
    timestamp_ms: non_neg_integer()
  }
end

defmodule GtrFabric.SLA do
  @moduledoc """
  Represents the end-to-end SLA requirements for a task, now including dynamic weights.
  """
  defstruct [
    :e2e_latency_ms,
    :jitter_ms,
    :loss_percentage,
    # Weights are now part of the SLA, making them dynamic per-task.
    :weight_latency,
    :weight_throughput,
    :weight_trust,
    # Threshold for multipath routing (e.g., 1.05 = 5% tolerance)
    :multipath_threshold
  ]

  @type t :: %__MODULE__{
        e2e_latency_ms: non_neg_integer(),
        jitter_ms: non_neg_integer(),
        loss_percentage: float(),
        weight_latency: float(),
        weight_throughput: float(),
        weight_trust: float(),
        multipath_threshold: float()
      }

  @doc "Create a new SLA with default weights and threshold."
  def new(
        e2e_latency_ms,
        jitter_ms,
        loss_percentage,
        weights \\ %{},
        multipath_threshold \\ 1.05
      ) do
    %__MODULE__{
      e2e_latency_ms: e2e_latency_ms,
      jitter_ms: jitter_ms,
      loss_percentage: loss_percentage,
      weight_latency: Map.get(weights, :latency, 1.0),
      weight_throughput: Map.get(weights, :throughput, 1.0),
      weight_trust: Map.get(weights, :trust, 1.0),
      multipath_threshold: multipath_threshold
    }
  end
end

defmodule GtrFabric.ResolutionReport do
  @moduledoc """
  The comprehensive report generated by the `analyse_dag` NIF after a task is complete.
  Passed back from Rust to Elixir.
  """
  defstruct [
    :sla_met,
    :avg_latency_ms,
    :jitter_ms,
    :loss_percentage,
    :analysis_summary
  ]

  @type t :: %__MODULE__{
    sla_met: boolean(),
    avg_latency_ms: float(),
    jitter_ms: float(),
    loss_percentage: float(),
    analysis_summary: String.t()
  }
end

# --- PoPS (Proof-of-Performance Staking) Model Types ---

defmodule GtrFabric.NetworkState do
  @moduledoc """
  Corresponds to the Rust `NetworkState` struct.
  Holds real-time metrics about the network's health.
  """
  @enforce_keys [:network_failure_rate, :supply_demand_ratio, :avg_network_trust]
  defstruct [
    :network_failure_rate,
    :supply_demand_ratio,
    :avg_network_trust
  ]

  @type t :: %__MODULE__{
    network_failure_rate: float(),
    supply_demand_ratio: float(),
    avg_network_trust: float()
  }
end

defmodule GtrFabric.DynamicParameters do
  @moduledoc """
  Corresponds to the Rust `DynamicParameters` struct.
  Holds the dynamic parameters for the PoPS model.
  """
  @enforce_keys [
    :steepness,
    :centre,
    :failure_weight,
    :decay_lambda_per_day,
    :collateral_multiplier,
    :bonus_multiplier
  ]
  defstruct [
    :steepness,
    :centre,
    :failure_weight,
    :decay_lambda_per_day,
    :collateral_multiplier,
    :bonus_multiplier
  ]

  @type t :: %__MODULE__{
    steepness: float(),
    centre: float(),
    failure_weight: float(),
    decay_lambda_per_day: float(),
    collateral_multiplier: float(),
    bonus_multiplier: float()
  }

  def new() do
    # Mirrors the `default()` implementation in Rust
    %__MODULE__{
      steepness: 5.0,
      centre: 0.3,
      failure_weight: 0.2,
      decay_lambda_per_day: 0.01,
      collateral_multiplier: 2.0,
      bonus_multiplier: 0.25
    }
  end
end

defmodule GtrFabric.TrustScore do
  @moduledoc """
  Represents a supplier's trust score.
  """
  @enforce_keys [:value, :last_updated_ts]
  defstruct [:value, :last_updated_ts]

  @type t :: %__MODULE__{
    value: float(),
    last_updated_ts: integer()
  }
end

defmodule GtrFabric.PublishedOffering do
  @moduledoc """
  Represents a supplier's public offering.
  """
  @enforce_keys [:staked_collateral, :price_per_call]
  defstruct [:staked_collateral, :price_per_call]

  @type t :: %__MODULE__{
    staked_collateral: integer(),
    price_per_call: integer()
  }
end

defmodule GtrFabric.ConsumerFactors do
  @moduledoc """
  Represents the factors a consumer considers when evaluating an offering.
  """
  @enforce_keys [:risk_aversion, :budget, :cost_of_failure]
  defstruct [:risk_aversion, :budget, :cost_of_failure]

  @type t :: %__MODULE__{
    risk_aversion: float(),
    budget: integer(),
    cost_of_failure: float()
  }
end

defmodule GtrFabric.PenaltyCurve do
  @moduledoc """
  Corresponds to the Rust `PenaltyCurve` struct.
  Defines the shape of the penalty function for slashing.
  """
  @enforce_keys [:steepness, :centre]
  defstruct [:steepness, :centre]

  @type t :: %__MODULE__{
    steepness: float(),
    centre: float()
  }
end

defmodule GtrFabric.SupplierPricingFactors do
  @moduledoc """
  Corresponds to the Rust `SupplierPricingFactors` struct.
  Defines the factors a supplier uses to calculate their price.
  """
  @enforce_keys [:base_reward, :reputation_bonus_multiplier, :confidence]
  defstruct [:base_reward, :reputation_bonus_multiplier, :confidence]

  @type t :: %__MODULE__{
    base_reward: integer(),
    reputation_bonus_multiplier: float(),
    confidence: float()
  }
end

defmodule GtrFabric.SlaGuarantees do
  @moduledoc """
  Corresponds to the Rust `SlaGuarantees` struct.
  Defines the performance guarantees of a task.
  """
  @enforce_keys [:min_throughput]
  defstruct [:min_throughput]

  @type t :: %__MODULE__{
    min_throughput: float()
  }
end

defmodule GtrFabric.InteractionRecord do
  @moduledoc """
  Represents a single, factual record of a completed interaction.
  This is the ground truth data that reputation scores are derived from.
  """
  defstruct [
    :timestamp,
    :outcome,
    :sla_met,
    :performance_metric,
    :task_id
  ]

  @type t :: %__MODULE__{
    timestamp: DateTime.t(),
    outcome: :success | :failure,
    sla_met: boolean(),
    performance_metric: float(),
    task_id: String.t() | nil
  }
end

defmodule GtrFabric.PerformanceLedger do
  @moduledoc """
  A collection of InteractionRecords representing the complete factual history
  of an agent's performance. This is the primary data structure for reputation.
  """
  defstruct [
    :records,
    :subject_id
  ]

  @type t :: %__MODULE__{
    records: [GtrFabric.InteractionRecord.t()],
    subject_id: String.t()
  }

  @doc """
  Creates a new empty performance ledger for a subject.
  """
  def new(subject_id) do
    %__MODULE__{
      records: [],
      subject_id: subject_id
    }
  end

  @doc """
  Adds a new interaction record to the ledger.
  """
  def add_record(%__MODULE__{} = ledger, %GtrFabric.InteractionRecord{} = record) do
    %{ledger | records: [record | ledger.records]}
  end

  @doc """
  Gets the most recent N records from the ledger.
  """
  def recent_records(%__MODULE__{records: records}, count) do
    records
    |> Enum.sort_by(& &1.timestamp, {:desc, DateTime})
    |> Enum.take(count)
  end

  @doc """
  Calculates basic statistics from the ledger.
  """
  def calculate_stats(%__MODULE__{records: records}) do
    if Enum.empty?(records) do
      %{total: 0, successes: 0, failures: 0, success_rate: 0.0}
    else
      total = length(records)
      successes = Enum.count(records, & &1.outcome == :success)
      failures = total - successes
      success_rate = successes / total

      %{
        total: total,
        successes: successes,
        failures: failures,
        success_rate: success_rate
      }
    end
  end
end
